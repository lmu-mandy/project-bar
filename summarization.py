"""summarization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13mdqkS98MyX4vxXBifG6SX7N-2LTPtDH

Code based on:
    https://www.analyticsvidhya.com/blog/2019/06/comprehensive-guide-text-summarization-using-deep-learning-python/
    https://pytorch.org/tutorials/intermediate/seq2seq_translation_tutorial.html#the-decoder
"""

from __future__ import unicode_literals, print_function, division
from io import open
import unicodedata
import string
import re
import random

import torch
import torch.nn as nn
from torch import optim
import torch.nn.functional as F
import numpy as np
import pandas as pd
import warnings

from bs4 import BeautifulSoup

#!pip install nltk
import nltk
#nltk.download('stopwords')
from nltk.corpus import stopwords

#device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
#from google.colab import drive
#drive.mount('/content/drive')

# The data can be downloaded from 
# https://www.kaggle.com/snap/amazon-fine-food-reviews


pd.set_option("display.max_colwidth", 200)
warnings.filterwarnings("ignore")

# Import data
data = pd.read_csv("data/reviews.csv", nrows=100000)

# Drop duplicates and NA values
data.drop_duplicates(subset=['Text'], inplace=True)
data.dropna(axis=0, inplace=True)

## Preprocessing
# Expand contractions
contraction_mapping = {"ain't": "is not", "aren't": "are not","can't": "cannot", "'cause": "because", "could've": "could have", "couldn't": "could not",

                           "didn't": "did not", "doesn't": "does not", "don't": "do not", "hadn't": "had not", "hasn't": "has not", "haven't": "have not",

                           "he'd": "he would","he'll": "he will", "he's": "he is", "how'd": "how did", "how'd'y": "how do you", "how'll": "how will", "how's": "how is",

                           "I'd": "I would", "I'd've": "I would have", "I'll": "I will", "I'll've": "I will have","I'm": "I am", "I've": "I have", "i'd": "i would",

                           "i'd've": "i would have", "i'll": "i will",  "i'll've": "i will have","i'm": "i am", "i've": "i have", "isn't": "is not", "it'd": "it would",

                           "it'd've": "it would have", "it'll": "it will", "it'll've": "it will have","it's": "it is", "let's": "let us", "ma'am": "madam",

                           "mayn't": "may not", "might've": "might have","mightn't": "might not","mightn't've": "might not have", "must've": "must have",

                           "mustn't": "must not", "mustn't've": "must not have", "needn't": "need not", "needn't've": "need not have","o'clock": "of the clock",

                           "oughtn't": "ought not", "oughtn't've": "ought not have", "shan't": "shall not", "sha'n't": "shall not", "shan't've": "shall not have",

                           "she'd": "she would", "she'd've": "she would have", "she'll": "she will", "she'll've": "she will have", "she's": "she is",

                           "should've": "should have", "shouldn't": "should not", "shouldn't've": "should not have", "so've": "so have","so's": "so as",

                           "this's": "this is","that'd": "that would", "that'd've": "that would have", "that's": "that is", "there'd": "there would",

                           "there'd've": "there would have", "there's": "there is", "here's": "here is","they'd": "they would", "they'd've": "they would have",

                           "they'll": "they will", "they'll've": "they will have", "they're": "they are", "they've": "they have", "to've": "to have",

                           "wasn't": "was not", "we'd": "we would", "we'd've": "we would have", "we'll": "we will", "we'll've": "we will have", "we're": "we are",

                           "we've": "we have", "weren't": "were not", "what'll": "what will", "what'll've": "what will have", "what're": "what are",

                           "what's": "what is", "what've": "what have", "when's": "when is", "when've": "when have", "where'd": "where did", "where's": "where is",

                           "where've": "where have", "who'll": "who will", "who'll've": "who will have", "who's": "who is", "who've": "who have",

                           "why's": "why is", "why've": "why have", "will've": "will have", "won't": "will not", "won't've": "will not have",

                           "would've": "would have", "wouldn't": "would not", "wouldn't've": "would not have", "y'all": "you all",

                           "y'all'd": "you all would","y'all'd've": "you all would have","y'all're": "you all are","y'all've": "you all have",

                           "you'd": "you would", "you'd've": "you would have", "you'll": "you will", "you'll've": "you will have",

                           "you're": "you are", "you've": "you have"}

# Text cleaning (lowercase, remove html tags, contraction mapping, remove ('s), remove text inside parenthesis,
#                eliminate punctuations and special characters, remove stopwords, remove short words)
stop_words = set(stopwords.words('english')) 
def text_cleaner(text):
    new_string = text.lower()
    new_string = BeautifulSoup(new_string, "lxml").text
    new_string = re.sub(r'\([^)]*\)', '', new_string)
    new_string = re.sub('"', '', new_string)
    new_string = ' '.join([contraction_mapping[t] if t in contraction_mapping else t for t in new_string.split(" ")])    
    new_string = re.sub(r"'s\b", "", new_string)
    new_string = re.sub("[^a-zA-Z]", " ", new_string) 
    tokens = [w for w in new_string.split() if not w in stop_words]
    long_words=[]
    for i in tokens:
        if len(i)>=3:                  #removing short word
            long_words.append(i)   
    return (" ".join(long_words)).strip()

cleaned_text = []
for t in data['Text']:
    cleaned_text.append(text_cleaner(t))

# Summary Cleaning
def summary_cleaner(text):
    new_string = re.sub('"','', text)
    new_string = ' '.join([contraction_mapping[t] if t in contraction_mapping else t for t in new_string.split(" ")])    
    new_string = re.sub(r"'s\b", "", new_string)
    new_string = re.sub("[^a-zA-Z]", " ", new_string)
    new_string = new_string.lower()
    tokens=new_string.split()
    new_string=''
    for i in tokens:
        if len(i)>1:                                 
            new_string=new_string + i + ' '  
    return new_string

cleaned_summary = []
for t in data['Summary']:
    cleaned_summary.append(summary_cleaner(t))

# Cleaning text and summary columns
data['cleaned_text'] = cleaned_text
data['cleaned_summary'] = cleaned_summary
data['cleaned_summary'].replace('', np.nan, inplace=True)
data.dropna(axis=0, inplace=True)

# checking
print(data[['cleaned_text', 'cleaned_summary']][:5])

text = data['cleaned_text'].apply(lambda x : '<SOS> '+ x + ' <EOS>')
summary = data['cleaned_summary'].apply(lambda x : '<SOS> '+ x + ' <EOS>')



## Sequences distribution ##
import matplotlib.pyplot as plt

text_word_count = []
summary_word_count = []

# sentece lengths
for i in data['cleaned_text']:
    text_word_count.append(len(i.split()))

for i in data['cleaned_summary']:
    summary_word_count.append(len(i.split()))

length_df = pd.DataFrame({'text':text_word_count, 'summary':summary_word_count})
length_df.hist(bins=30)
plt.show()

"""
We could fix the max length of the reviews to 80,
and the max length of the summary to 10
"""

## Data Splitting
from sklearn.model_selection import train_test_split

x_train, x_val, y_train, y_val = train_test_split(text, summary, test_size=0.1, 
                                                  random_state=0, shuffle=True)

from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences

max_len_text = 80
max_len_summary = 10

## Tokenizer
# Text Tokenizer

x_tokenizer = Tokenizer()
x_tokenizer.fit_on_texts(list(x_train))

x_train = x_tokenizer.texts_to_sequences(x_train)
x_val = x_tokenizer.texts_to_sequences(x_val)

x_train = pad_sequences(x_train, maxlen=max_len_text, padding='post')
x_val = pad_sequences(x_val, maxlen=max_len_text, padding='post')

x_voc_size = len(x_tokenizer.word_index) +1


# Summary Tokenizer

y_tokenizer = Tokenizer()
y_tokenizer.fit_on_texts(list(y_train))

y_train = y_tokenizer.texts_to_sequences(y_train)
y_val = y_tokenizer.texts_to_sequences(y_val)

y_train = pad_sequences(y_train, maxlen=max_len_summary, padding='post')
y_val = pad_sequences(y_val, maxlen=max_len_summary, padding='post')

y_voc_size = len(y_tokenizer.word_index) +1

def to_tensor(x_data, y_labels):
    tensor_data = []
    for i in range(len(x_data)):
        x_tensor = torch.tensor(x_data[i], dtype=torch.long, device=device).view(-1, 1)
        y_tensor = torch.tensor(y_labels[i], dtype=torch.long, device=device).view(-1, 1)
        tensor_data.append([x_tensor, y_tensor])
    return tensor_data

training_pairs = to_tensor(x_train, y_train)
validation_pairs = to_tensor(x_val, y_val)

SOS_token = x_tokenizer.word_index['sos']
EOS_token = x_tokenizer.word_index['eos']


## Encoder
class EncoderRNN(nn.Module):
    def __init__(self, input_size, hidden_size):
        super(EncoderRNN, self).__init__()
        self.hidden_size = hidden_size

        self.embedding = nn.Embedding(input_size, hidden_size)
        self.gru = nn.GRU(hidden_size, hidden_size)

    def forward(self, input, hidden):
        embedded = self.embedding(input).view(1, 1, -1)
        output = embedded
        output, hidden = self.gru(output, hidden)
        return output, hidden

    def initHidden(self):
        return torch.zeros(1, 1, self.hidden_size, device=device)

## Decoder
class DecoderRNN(nn.Module):
    def __init__(self, hidden_size, output_size):
        super(DecoderRNN, self).__init__()
        self.hidden_size = hidden_size

        self.embedding = nn.Embedding(output_size, hidden_size)
        self.gru = nn.GRU(hidden_size, hidden_size)
        self.out = nn.Linear(hidden_size, output_size)
        self.softmax = nn.LogSoftmax(dim=1)

    def forward(self, input, hidden):
        output = self.embedding(input).view(1, 1, -1)
        output = F.relu(output)
        output, hidden = self.gru(output, hidden)
        output = self.softmax(self.out(output[0])) ## why output[0]!? maybe it comes inside something
        return output, hidden

    def initHidden(self):
        return torch.zeros(1, 1, self.hidden_size, device=device)

## Attention-Decoder

# Because there are sentences of all sizes in the training data, to actually 
# create and train this layer we have to choose a maximum sentence length 
# (input length, for encoder outputs) that it can apply to. Sentences of the 
# maximum length will use all the attention weights, while shorter sentences 
# will only use the first few.

class AttnDecoderRNN(nn.Module):
    def __init__(self, hidden_size, output_size, dropout_p=0.1, max_length=max_len_text):
        super(AttnDecoderRNN, self).__init__()
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.dropout_p = dropout_p
        self.max_length = max_length

        self.embedding = nn.Embedding(self.output_size, self.hidden_size)
        self.attn = nn.Linear(self.hidden_size * 2, self.max_length)
        self.attn_combine = nn.Linear(self.hidden_size * 2, self.hidden_size)
        self.dropout = nn.Dropout(self.dropout_p)
        self.gru = nn.GRU(self.hidden_size, self.hidden_size)   #
        self.out = nn.Linear(self.hidden_size, self.output_size)    #

    def forward(self, input, hidden, encoder_outputs):
        embedded = self.embedding(input).view(1, 1, -1)
        embedded = self.dropout(embedded)
        #print("input", input)
        #print(embedded.size())
        #print(embedded[0].size())
        #print(hidden.size())
        #print(hidden[0].size())

        attn_weights = F.softmax(
            self.attn(torch.cat((embedded[0], hidden[0]), 1)), dim=1)
        attn_applied = torch.bmm(attn_weights.unsqueeze(0),
                                 encoder_outputs.unsqueeze(0))
        
        output = torch.cat((embedded[0], attn_applied[0]), 1)
        output = self.attn_combine(output).unsqueeze(0)

        output = F.relu(output)
        output, hidden = self.gru(output, hidden)

        output = F.log_softmax(self.out(output[0]), dim=1)
        return output, hidden, attn_weights

    def initHidden(self):
        return torch.zeros(1, 1, self.hidden_size, device=device)


# Training
def train(input_tensor, target_tensor, encoder, decoder, encoder_optimizer, 
          decoder_optimizer, criterion, max_length=max_len_text):
    encoder_hidden = encoder.initHidden()

    encoder_optimizer.zero_grad()
    decoder_optimizer.zero_grad()

    #print("input_len", input_tensor.size())
    #print("target_len", target_tensor.size())
    input_length = input_tensor.size(0)
    target_length = target_tensor.size(0)

    encoder_outputs = torch.zeros(max_length, encoder.hidden_size, device=device)
    #print("encoder outputs: ",encoder_outputs.type())
    loss = 0

    for ei in range(input_length):
        encoder_output, encoder_hidden = encoder(
            input_tensor[ei], encoder_hidden)
        encoder_outputs[ei] = encoder_output[0, 0]

    decoder_input = torch.tensor([[SOS_token]], device=device)
    #print("decoder input: ", decoder_input.type())

    decoder_hidden = encoder_hidden
    #print("decoder hidden: ", decoder_hidden.type())

    for di in range(target_length):
        decoder_output, decoder_hidden, decoder_attention = decoder(
            decoder_input, decoder_hidden, encoder_outputs)
        topv, topi = decoder_output.topk(1)
        decoder_input = topi.squeeze().detach() # detach from history as input
        #print(target_tensor[di])
        #print(target_tensor[di].size())
        loss += criterion(decoder_output, target_tensor[di])
        if decoder_input.item() == EOS_token:
            break

    loss.backward()

    encoder_optimizer.step()
    decoder_optimizer.step()

    return loss.item() / target_length


# Seting time for each iteration
import time
import math

def asMinutes(s):
    m = math.floor(s / 60)
    s -= m * 60
    return '%dm %ds' % (m, s)
def timeSince(since, percent):
    now = time.time()
    s = now - since
    es = s / (percent)
    rs = es - s
    return '%s (- %s)' % (asMinutes(s), asMinutes(rs))


# Training iteration
def trainIters(encoder, decoder, n_iters, print_every=1000, plot_every=100,
               learning_rate=0.01):
    start = time.time()
    plot_losses = []
    print_loss_total = 0    # Reset every print_every
    plot_loss_total = 0     # Reset every plot_every

    encoder_optimizer = optim.SGD(encoder.parameters(), lr=learning_rate)
    decoder_optimizer = optim.SGD(decoder.parameters(), lr=learning_rate)

    criterion = nn.NLLLoss()

    for iter in range(1, n_iters + 1):
        training_pair = training_pairs[iter - 1]
        input_tensor = training_pair[0]
        #print("input:", input_tensor)
        target_tensor = training_pair[1]
        #print("target:", target_tensor)

        loss = train(input_tensor, target_tensor, encoder,
                     decoder, encoder_optimizer, decoder_optimizer, criterion)
        print_loss_total += loss
        plot_loss_total += loss

        if iter % print_every == 0:
            print_loss_avg = print_loss_total / print_every
            print_loss_total = 0
            print('%s (%d %d%%) %.4f' % (timeSince(start, iter / n_iters),
                                         iter, iter / n_iters * 100, print_loss_avg))
            
        if iter % plot_every == 0:
            plot_loss_avg = plot_loss_total / plot_every
            plot_losses.append(plot_loss_avg)
            plot_loss_total = 0

    showPlot(plot_losses)


import matplotlib.pyplot as plt
plt.switch_backend('agg')
import matplotlib.ticker as ticker
import numpy as np

# Helper function to plot the loss
def showPlot(points):
    plt.figure()
    fig, ax = plt.subplots()
    # this locator puts ticks at regular intervals
    loc = ticker.MultipleLocator(base=0.2)
    ax.yaxis.set_major_locator(loc)
    plt.plot(points)


## Index to word and tensor to word helper functions
def index_to_word(index, x_y):
    word = ""
    if index != 0 and index != 1 and index != 2:
        word = x_y.index_word[index]
    return word

def tensor_to_word(tensor, x_y):
    sentence = []
    for i in tensor:
        index = int(i[0])
        word = index_to_word(index, x_y)
        sentence.append(word)
    return ' '.join(sentence)


## Evaluating (help us produce a summary)
def evaluate(encoder, decoder, sentence, max_length=max_len_text):
    with torch.no_grad():
        input_tensor = sentence
        input_length = input_tensor.size()[0]
        encoder_hidden = encoder.initHidden()

        encoder_outputs = torch.zeros(max_length, encoder.hidden_size, device=device)

        for ei in range(input_length):
            encoder_output, encoder_hidden = encoder(input_tensor[ei],
                                                     encoder_hidden)
            encoder_outputs[ei] += encoder_output[0, 0]

        decoder_input = torch.tensor([[SOS_tokent]], device=device)

        decoder_hidden = encoder_hidden

        decoded_words = []
        decoder_attentions = torch.zeros(max_length, max_length)

        for di in range(max_length):
            decoder_output, decoder_hidden, decoder_attention = decoder(
                decoder_input, decoder_hidden, encoder_outputs)
            decoder_attentions[di] = decoder_attention.data
            topv, topi = decoder_output.data.topk(1)
            if topi.item() == EOS_token:
                decoded_words.append('<EOS>')
                break
            else:
                word = index_to_word(topi.item(), y_tokenizer)
                decoded_words.append(word)

            decoder_input = topi.squeeze().detach()

        return decoded_words, decoder_attentions[:di + 1]


"""
## Evaluation show: (text summary label, summary prediction) + bleu score
"""
from nltk.translate.bleu_score import corpus_bleu

def evaluateRandomly(encoder, decoder, data_pairs, n=10):
    """To speed up testing, we only evaluate BLEU score on n test sentences."""
    references = []
    predictions = []
    for i in range(n):
        pair = random.choice(data_pairs)
        text = tensor_to_word(pair[0], x_tokenizer)
        summary = tensor_to_word(pair[1], y_tokenizer)
        print('>', text)
        print('=', summary)
        references.append(summary)
        output_words, _ = evaluate(encoder, decoder, pair[0])
        predictions.append(output_words)
        output_sentence = ' '.join(output_words)
        print('<', output_sentence)
        print('')

    score = corpus_bleu(references, predictions)
    print('BLEU score:', score)

"""Finally, we can actually run and test the model (with attention)"""

hidden_size = 256
encoder1 = EncoderRNN(x_voc_size, hidden_size).to(device)
# TODO: try DecoderRNN without attention (remove dropout_p parameter)
attn_decoder1 = AttnDecoderRNN(hidden_size, y_voc_size, dropout_p=0.1).to(device)

# TO speed up training, you can reduce 75000 to 5000
trainIters(encoder1, attn_decoder1, 75000, print_every=5000)

'''
9m 44s (- 136m 17s) (5000 6%) 1.6195
19m 27s (- 126m 29s) (10000 13%) 1.5360
29m 9s (- 116m 39s) (15000 20%) 1.4737
38m 55s (- 107m 1s) (20000 26%) 1.4564
48m 37s (- 97m 14s) (25000 33%) 1.4291
58m 18s (- 87m 27s) (30000 40%) 1.4645
68m 0s (- 77m 43s) (35000 46%) 1.4260
77m 42s (- 67m 59s) (40000 53%) 1.4058
87m 23s (- 58m 15s) (45000 60%) 1.3882
97m 4s (- 48m 32s) (50000 66%) 1.3766
106m 50s (- 38m 50s) (55000 73%) 1.3954
116m 30s (- 29m 7s) (60000 80%) 1.3896
126m 11s (- 19m 24s) (65000 86%) 1.4106
135m 52s (- 9m 42s) (70000 93%) 1.3665
145m 34s (- 0m 0s) (75000 100%) 1.3724
'''

# Working on evaluation..
# evaluateRandomly(encoder1, attn_decoder1, training_pairs)

